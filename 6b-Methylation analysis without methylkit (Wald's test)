library(tidyr)
library(readr)
library(dplyr)
library(pheatmap)
library(aod) # To perform wald.test
library(ggplot2)
library(lmtest)
library(multtest)

Tile <- read.delim("Gastrula/Tile_Unite_G_all.txt", header=TRUE, sep="\t") # Data computed from MethylKit (see the 6a file)

# Formatting data as a simple matrix
Met <- Tile %>%
  rename(strand_TT1 = strand,
         coverage_TT1 = coverage1,
         numCs_TT1 = numCs1,
         numTs_TT1 = numTs1,
         coverage_TT2 = coverage2,
         numCs_TT2 = numCs2,
         numTs_TT2 = numTs2,
         coverage_TT3 = coverage3,
         numCs_TT3 = numCs3,
         numTs_TT3 = numTs3,
         coverage_TE1 = coverage4,
         numCs_TE1 = numCs4,
         numTs_TE1 = numTs4,
         coverage_TE2 = coverage5,
         numCs_TE2 = numCs5,
         numTs_TE2 = numTs5,
         coverage_TE3 = coverage6,
         numCs_TE3 = numCs6,
         numTs_TE3 = numTs6,
         coverage_ET1 = coverage7,
         numCs_ET1 = numCs7,
         numTs_ET1 = numTs7,
         coverage_ET2 = coverage8,
         numCs_ET2 = numCs8,
         numTs_ET2 = numTs8,
         coverage_ET3 = coverage9,
         numCs_ET3 = numCs9,
         numTs_ET3 = numTs9,
         coverage_EE1 = coverage10,
         numCs_EE1 = numCs10,
         numTs_EE1 = numTs10,
         coverage_EE2 = coverage11,
         numCs_EE2 = numCs11,
         numTs_EE2 = numTs11,
         coverage_EE3 = coverage12,
         numCs_EE3 = numCs12,
         numTs_EE3 = numTs12) %>%
  mutate(TT1 = ((numCs_TT1*100)/coverage_TT1),
         TT2 = ((numCs_TT2*100)/coverage_TT2),
         TT3 = ((numCs_TT3*100)/coverage_TT3),
         TE1 = ((numCs_TE1*100)/coverage_TE1),
         TE2 = ((numCs_TE2*100)/coverage_TE2),
         TE3 = ((numCs_TE3*100)/coverage_TE3),
         ET1 = ((numCs_ET1*100)/coverage_ET1),
         ET2 = ((numCs_ET2*100)/coverage_ET2),
         ET3 = ((numCs_ET3*100)/coverage_ET3),
         EE1 = ((numCs_EE1*100)/coverage_EE1),
         EE2 = ((numCs_EE2*100)/coverage_EE2),
         EE3 = ((numCs_EE3*100)/coverage_EE3)) %>%
  unite(col = "Region", chr:end, sep ="_") %>%
  select(Region, TT1, TT2, TT3, TE1, TE2, TE3, ET1, ET2, ET3, EE1, EE2, EE3)


  Methylation <- Met %>%
  pivot_longer(!Region,names_to = "Sample", values_to = "Methylation") %>%
  pivot_wider(names_from = Region, values_from = Methylation) %>%
  mutate(Treatment = c("C", "C", "C", "E", "E", "E", "C", "C", "C", "E", "E", "E"),
         Pedigree = c("Control", "Control", "Control", "Control", "Control", "Control", "Exposed", "Exposed", "Exposed", "Exposed", "Exposed", "Exposed"),
         Condition = c("CC", "CC", "CC", "CE", "CE", "CE", "EC", "EC", "EC", "EE", "EE", "EE"))

# Place informative variables in the first columns of the dataset
Final <- Methylation %>%
  select(1, 96375, 96376,96377, 2:96374)

# The Wald test does not accept any 0-full columns, so we cancel them
F1 <- Final %>%
  select(5:96377) %>%
  t()  %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var="Region") %>%
  pivot_longer(!Region, names_to = "Sample", values_to = "Methylation") %>%
  group_by(Region) %>%
  summarise(Moyenne = mean(Methylation)) %>%
    filter(Moyenne != 0)
Final <- Final %>%
  pivot_longer(!c("Sample", "Treatment", "Pedigree", "Condition"), names_to = "Region", values_to = "Methylation") %>%
  filter(Region %in% F1$Region) %>%
  pivot_wider(names_from = "Region", values_from = "Methylation")

################################################################
## Wald test:
monWald <- function(variable, facteurs) {
  myX <- variable
  First <- as.formula(paste("myX", "~", facteurs, sep=""))
  model <- lm(First)
  modele <- wald.test(Sigma = vcov(model), b=coef(model), Terms=2)
  return(modele$result)
}
result=apply(Final[,5:96290], MARGIN=2, FUN=monWald, facteurs="Final$Pedigree")

b <- colnames(Final[,5:96290])
try <- as.data.frame(result)# Object try contains pvalues for each MR
try <- try[3,]
colnames(try) = b
try <- as.matrix(try)

# Now, need to adjust p-values:
index <- as.data.frame(colnames(try)) %>%
  tibble::rownames_to_column(var="Idx") %>%
  as.data.frame()
View(index)

wald.adj <- mt.rawp2adjp(try,"BH")
pval.adj <- as.data.frame(wald.adj$adjp[order(wald.adj$index),])
rownames(pval.adj) = index$`colnames(try)`
colnames(pval.adj)=c("pval_PedEvsPedC", "BH_PedEvsPedC")
pval.adj <- pval.adj %>%
  tibble::rownames_to_column(var="Region") %>%
  as.data.frame() %>%
  separate(Region, into = c("chr", "start", "end"), sep="_")

# Retrieving only regions with significant differential methylation
Ped_DMR <- pval.adj %>% 
  filter(BH_PedEvsPedC < 0.05)

# Calculating differential methylation
Diff <-Met %>%
  mutate(Diff = ((ET1+ET2+ET3+EE1+EE2+EE3)/6)-((TT1+TT2+TT3+TE1+TE2+TE3)/6))
#Retrieving only regions with an absolute difference higher than 10%
Diff <- Diff %>%
  filter(abs(Diff) > 10) %>%
  select(Region, Diff)

# Retrieving regions having a significant difference higher than 10%
Ped_signif <- Ped_DMR %>%
  unite(Region, c("chr", "start", "end")) %>%
  unique() %>%
  filter(Region %in% Diff$Region)
